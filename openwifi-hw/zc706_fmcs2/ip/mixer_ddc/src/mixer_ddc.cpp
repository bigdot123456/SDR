// Xianjun jiao. putaoshu@msn.com; xianjun.jiao@imec.be;

#include <complex>
#include "ap_int.h"

typedef ap_int<2> int2;
typedef ap_uint<2> uint2;
typedef ap_int<3> int3;
typedef ap_uint<3> uint3;
typedef ap_int<4> int4;
typedef ap_int<16> int16;
typedef ap_uint<16> uint16;
typedef ap_int<32> int32;
typedef ap_int<64> int64;
typedef ap_int<128> int128;
typedef ap_int<256> int256;

typedef std::complex<int32> cplx32;

const char i_p2MHz[160] = {64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61};
const char q_p2MHz[160] = {0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20, 0, 20, 38, 52, 61, 64, 61, 52, 38, 20, 0, -20, -38, -52, -61, -64, -61, -52, -38, -20};
const char i_p0n5n10n15n20MHz[5][160] = {
{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
{64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45},
{64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0},
{64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45},
{64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64, 64, -64}
};
const char q_p0n5n10n15n20MHz[5][160] = {
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45},
{0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64},
{0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

/*
// following arrays are generated by gen_mixer_coef_padded.m
const char i_p8n5n10n15n20MHz[5][160] = {
{64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20, 64, 20, -52, -52, 20},
{64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45},
{64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0},
{64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45},
{}
};
const char q_p8n5n10n15n20MHz[5][160] = {
{0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61, 0, 61, 38, -38, -61},
{0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45, 0, -45, -64, -45, 0, 45, 64, 45},
{0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64, 0, -64, 0, 64},
{0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45, 0, -45, 64, -45, 0, 45, -64, 45},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};
*/

#define INPUT_LENGTH 160

void mixer_ddc(int64 d_i[INPUT_LENGTH], int32 cfg0,
		int64 d_o0[INPUT_LENGTH], int128 d_o1[INPUT_LENGTH])
{
#pragma HLS INTERFACE ap_stable port=cfg0
#pragma HLS INTERFACE ap_ctrl_none port=return
//#pragma HLS DATAFLOW
#pragma HLS INTERFACE ap_fifo port=d_i
#pragma HLS INTERFACE axis port=d_o0
#pragma HLS INTERFACE axis port=d_o1

	unsigned char i;
	int64 tmp64;
	int128 tmp128;
	cplx32 bw20_a0, bw20_a1, bw02_a0, bw02_a1;
	cplx32 b0, b1;
	cplx32 c00, c01, c02, c03, c04, c10, c11, c12, c13, c14;
	cplx32 p00, p01, p02, p03, p04, p10, p11, p12, p13, p14;

	int2 bw20_ant0_conj_flag, bw20_ant1_conj_flag;
	int2 bw02_ant0_2M_conj_flag, bw02_ant1_2M_conj_flag;
	int2 bw02_ant0_ch0_conj_flag, bw02_ant0_ch1_conj_flag, bw02_ant0_ch2_conj_flag, bw02_ant0_ch3_conj_flag;
	int2 bw02_ant1_ch0_conj_flag, bw02_ant1_ch1_conj_flag, bw02_ant1_ch2_conj_flag, bw02_ant1_ch3_conj_flag;
	uint2 bw20_ant0_ch_idx, bw20_ant1_ch_idx;
	uint3 bw02_ant0_ch0_idx, bw02_ant0_ch1_idx, bw02_ant0_ch2_idx, bw02_ant0_ch3_idx;
	uint3 bw02_ant1_ch0_idx, bw02_ant1_ch1_idx, bw02_ant1_ch2_idx, bw02_ant1_ch3_idx;
	int4 bw20_num_shift_to_left, bw02_num_shift_to_left;

	bw20_ant0_ch_idx = cfg0(1,0);
	bw20_ant0_conj_flag = (cfg0[2])?(-1):1;
	bw02_ant0_2M_conj_flag = (cfg0[3])?(-1):1;
	bw02_ant0_ch0_conj_flag = (cfg0[4])?(-1):1;
	bw02_ant0_ch1_conj_flag = (cfg0[5])?(-1):1;
	bw02_ant0_ch2_conj_flag = (cfg0[6])?(-1):1;
	bw02_ant0_ch3_conj_flag = (cfg0[7])?(-1):1;

	bw20_ant1_ch_idx = cfg0(9,8);
	bw20_ant1_conj_flag = (cfg0[10])?(-1):1;
	bw02_ant1_2M_conj_flag = (cfg0[11])?(-1):1;
	bw02_ant1_ch0_conj_flag = (cfg0[12])?(-1):1;
	bw02_ant1_ch1_conj_flag = (cfg0[13])?(-1):1;
	bw02_ant1_ch2_conj_flag = (cfg0[14])?(-1):1;
	bw02_ant1_ch3_conj_flag = (cfg0[15])?(-1):1;

	bw02_ant0_ch0_idx = 0 + cfg0[16];
	bw02_ant0_ch1_idx = 1 + cfg0[16];
	bw02_ant0_ch2_idx = 2 + cfg0[16];
	bw02_ant0_ch3_idx = 3 + cfg0[16];

	bw02_ant1_ch0_idx = 0 + cfg0[17];
	bw02_ant1_ch1_idx = 1 + cfg0[17];
	bw02_ant1_ch2_idx = 2 + cfg0[17];
	bw02_ant1_ch3_idx = 3 + cfg0[17];

	bw20_num_shift_to_left = cfg0(31,28);
	bw02_num_shift_to_left = cfg0(27,24);
	/*
	int2 n1_flag0, n1_flag00, n1_flag01, n1_flag02, n1_flag03, n1_flag04;
	int2 n1_flag1, n1_flag10, n1_flag11, n1_flag12, n1_flag13, n1_flag14;
	n1_flag0 = (cfg0[0])?(-1):1;
	n1_flag00 = (cfg0[1])?(-1):1;
	n1_flag01 = (cfg0[2])?(-1):1;
	n1_flag02 = (cfg0[3])?(-1):1;
	n1_flag03 = (cfg0[4])?(-1):1;
	n1_flag04 = (cfg0[5])?(-1):1;
	n1_flag1 = (cfg0[8])?(-1):1;
	n1_flag10 = (cfg0[9])?(-1):1;
	n1_flag11 = (cfg0[10])?(-1):1;
	n1_flag12 = (cfg0[11])?(-1):1;
	n1_flag13 = (cfg0[12])?(-1):1;
	n1_flag14 = (cfg0[13])?(-1):1;
	*/
	for (i=0; i<INPUT_LENGTH; i++)
	{
#pragma HLS PIPELINE
		tmp64 = d_i[i];

		bw20_a0  = cplx32((int16)tmp64(15,0),(int16)tmp64(31,16));
		bw20_a1  = cplx32((int16)tmp64(47,32),(int16)tmp64(63,48));

		// gain module for bw02
		//bw02_a0_i = (int)tmp64(15,0);
		//bw02_a0_q = (int)tmp64(31,16);
		//bw02_a1_i = (int)tmp64(47,32);
		//bw02_a1_q = (int)tmp64(63,48);
		//bw02_a0  = cplx32(bw02_a0_i<<bw02_num_shift_to_left,bw02_a0_q<<bw02_num_shift_to_left);
		//bw02_a1  = cplx32(bw02_a1_i<<bw02_num_shift_to_left,bw02_a1_q<<bw02_num_shift_to_left);
		bw02_a0  = cplx32((int16)tmp64(15,0),(int16)tmp64(31,16));
		bw02_a1  = cplx32((int16)tmp64(47,32),(int16)tmp64(63,48));
		bw02_a0  = cplx32(real(bw02_a0)<<bw02_num_shift_to_left,imag(bw02_a0)<<bw02_num_shift_to_left);
		bw02_a1  = cplx32(real(bw02_a1)<<bw02_num_shift_to_left,imag(bw02_a1)<<bw02_num_shift_to_left);

		/*
		if (cfg0[27]==1) {
			bw02_a0  = cplx32((short)tmp64(15,0)>>(cfg0(26,24)),(short)tmp64(31,16)>>(cfg0(25,24)));
			bw02_a1  = cplx32((short)tmp64(47,32)>>(cfg0(26,24)),(short)tmp64(63,48)>>(cfg0(25,24)));
		} else {
			bw02_a0  = cplx32((short)tmp64(15,0)<<(cfg0(26,24)),(short)tmp64(31,16)<<(cfg0(25,24)));
			bw02_a1  = cplx32((short)tmp64(47,32)<<(cfg0(26,24)),(short)tmp64(63,48)<<(cfg0(25,24)));
		}
		*/
		/*
		b0 = cplx32(i_p2MHz[i], n1_flag0*q_p2MHz[i]);
		b1 = cplx32(i_p2MHz[i], n1_flag1*q_p2MHz[i]);
		c00 = cplx32(i_p0n5n10n15n20MHz[0][i], n1_flag00*q_p0n5n10n15n20MHz[0][i]);
		c01 = cplx32(i_p0n5n10n15n20MHz[1][i], n1_flag01*q_p0n5n10n15n20MHz[1][i]);
		c02 = cplx32(i_p0n5n10n15n20MHz[2][i], n1_flag02*q_p0n5n10n15n20MHz[2][i]);
		c03 = cplx32(i_p0n5n10n15n20MHz[3][i], n1_flag03*q_p0n5n10n15n20MHz[3][i]);
		c04 = cplx32(i_p0n5n10n15n20MHz[4][i], n1_flag04*q_p0n5n10n15n20MHz[4][i]);
		c10 = cplx32(i_p0n5n10n15n20MHz[0][i], n1_flag10*q_p0n5n10n15n20MHz[0][i]);
		c11 = cplx32(i_p0n5n10n15n20MHz[1][i], n1_flag11*q_p0n5n10n15n20MHz[1][i]);
		c12 = cplx32(i_p0n5n10n15n20MHz[2][i], n1_flag12*q_p0n5n10n15n20MHz[2][i]);
		c13 = cplx32(i_p0n5n10n15n20MHz[3][i], n1_flag13*q_p0n5n10n15n20MHz[3][i]);
		c14 = cplx32(i_p0n5n10n15n20MHz[4][i], n1_flag14*q_p0n5n10n15n20MHz[4][i]);

		p00 = a0*b0*c00;
		p01 = a0*b0*c01;
		p02 = a0*b0*c02;
		p03 = a0*b0*c03;
		p04 = a0*b0*c04;
		p10 = a1*b1*c10;
		p11 = a1*b1*c11;
		p12 = a1*b1*c12;
		p13 = a1*b1*c13;
		p14 = a1*b1*c14;
		*/

		// bw02ee first stage 2M mixer
		b0 = cplx32(i_p2MHz[i], bw02_ant0_2M_conj_flag*q_p2MHz[i]);
		b1 = cplx32(i_p2MHz[i], bw02_ant1_2M_conj_flag*q_p2MHz[i]);

		// bw20 mixer
		c00 = cplx32(i_p0n5n10n15n20MHz[bw20_ant0_ch_idx][i], bw20_ant0_conj_flag*q_p0n5n10n15n20MHz[bw20_ant0_ch_idx][i]);
		c10 = cplx32(i_p0n5n10n15n20MHz[bw20_ant1_ch_idx][i], bw20_ant1_conj_flag*q_p0n5n10n15n20MHz[bw20_ant1_ch_idx][i]);

		// bw02ee mixer
		c01 = cplx32(i_p0n5n10n15n20MHz[bw02_ant0_ch0_idx][i], bw02_ant0_ch0_conj_flag*q_p0n5n10n15n20MHz[bw02_ant0_ch0_idx][i]);
		c02 = cplx32(i_p0n5n10n15n20MHz[bw02_ant0_ch1_idx][i], bw02_ant0_ch1_conj_flag*q_p0n5n10n15n20MHz[bw02_ant0_ch1_idx][i]);
		//c03 = cplx32(i_p0n5n10n15n20MHz[bw02_ant0_ch2_idx][i], bw02_ant0_ch2_conj_flag*q_p0n5n10n15n20MHz[bw02_ant0_ch2_idx][i]);
		//c04 = cplx32(i_p0n5n10n15n20MHz[bw02_ant0_ch3_idx][i], bw02_ant0_ch3_conj_flag*q_p0n5n10n15n20MHz[bw02_ant0_ch3_idx][i]);
		c11 = cplx32(i_p0n5n10n15n20MHz[bw02_ant1_ch0_idx][i], bw02_ant1_ch0_conj_flag*q_p0n5n10n15n20MHz[bw02_ant1_ch0_idx][i]);
		c12 = cplx32(i_p0n5n10n15n20MHz[bw02_ant1_ch1_idx][i], bw02_ant1_ch1_conj_flag*q_p0n5n10n15n20MHz[bw02_ant1_ch1_idx][i]);
		//c13 = cplx32(i_p0n5n10n15n20MHz[bw02_ant1_ch2_idx][i], bw02_ant1_ch2_conj_flag*q_p0n5n10n15n20MHz[bw02_ant1_ch2_idx][i]);
		//c14 = cplx32(i_p0n5n10n15n20MHz[bw02_ant1_ch3_idx][i], bw02_ant1_ch3_conj_flag*q_p0n5n10n15n20MHz[bw02_ant1_ch3_idx][i]);

		p00 = bw20_a0*c00;
		p01 = bw02_a0*b0*c01;
		p02 = bw02_a0*b0*c02;
		//p03 = bw02_a0*b0*c03;
		//p04 = bw02_a0*b0*c04;
		p10 = bw20_a1*c10;
		p11 = bw02_a1*b1*c11;
		p12 = bw02_a1*b1*c12;
		//p13 = bw02_a1*b1*c13;
		//p14 = bw02_a1*b1*c14;

		/*
		tmp64(15,0) = real(p00)/4096;
		tmp64(31,16) = imag(p00)/4096;

		tmp64(47,32) = real(p10)/4096;
		tmp64(63,48) = imag(p10)/4096;
		*/

		// gain module for bw20
		tmp64(15,0)  = (((int32)real(p00))<<bw20_num_shift_to_left)/64;
		tmp64(31,16) = (((int32)imag(p00))<<bw20_num_shift_to_left)/64;
		tmp64(47,32) = (((int32)real(p10))<<bw20_num_shift_to_left)/64;
		tmp64(63,48) = (((int32)imag(p10))<<bw20_num_shift_to_left)/64;
		/*
		if (cfg0[31]==1) {
			//bw20_a0  = cplx32((short)tmp64(15,0)>>(cfg0(29,28)),(short)tmp64(31,16)>>(cfg0(29,28)));
			//bw20_a1  = cplx32((short)tmp64(47,32)>>(cfg0(29,28)),(short)tmp64(63,48)>>(cfg0(29,28)));
			//tmp64(15,0)  = (ap_int<16>)((((ap_int<32>)real(p00))>>((ap_int<3>)cfg0(30,28)))/64);
			//tmp64(31,16) = (ap_int<16>)((((ap_int<32>)imag(p00))>>((ap_int<3>)cfg0(30,28)))/64);
			//tmp64(47,32) = (ap_int<16>)((((ap_int<32>)real(p10))>>((ap_int<3>)cfg0(30,28)))/64);
			//tmp64(63,48) = (ap_int<16>)((((ap_int<32>)imag(p10))>>((ap_int<3>)cfg0(30,28)))/64);
			p00_i = real(p00)/64;
			p00_q = imag(p00)/64;
			p10_i = real(p10)/64;
			p10_q = imag(p10)/64;
			tmp64(15,0)  = (int16)(p00_i>>(int3)cfg0(30,28));
			tmp64(31,16) = (int16)(p00_q>>(int3)cfg0(30,28));
			tmp64(47,32) = (int16)(p10_i>>(int3)cfg0(30,28));
			tmp64(63,48) = (int16)(p10_q>>(int3)cfg0(30,28));
		} else {
			//bw20_a0  = cplx32((short)tmp64(15,0)<<(cfg0(29,28)),(short)tmp64(31,16)<<(cfg0(29,28)));
			//bw20_a1  = cplx32((short)tmp64(47,32)<<(cfg0(29,28)),(short)tmp64(63,48)<<(cfg0(29,28)));
			tmp64(15,0)  = (((int)real(p00))<<(cfg0(30,28)))/64;
			tmp64(31,16) = (((int)imag(p00))<<(cfg0(30,28)))/64;
			tmp64(47,32) = (((int)real(p10))<<(cfg0(30,28)))/64;
			tmp64(63,48) = (((int)imag(p10))<<(cfg0(30,28)))/64;
		}
		*/
		d_o0[i] = tmp64;

		tmp128(15,0) = real(p01)/4096;
		tmp128(31,16) = imag(p01)/4096;

		tmp128(47,32) = real(p11)/4096;
		tmp128(63,48) = imag(p11)/4096;

		tmp128(79,64) = real(p02)/4096;
		tmp128(95,80) = imag(p02)/4096;

		tmp128(111,96) = real(p12)/4096;
		tmp128(127,112) = imag(p12)/4096;
		d_o1[i] = tmp128;
	}
}
