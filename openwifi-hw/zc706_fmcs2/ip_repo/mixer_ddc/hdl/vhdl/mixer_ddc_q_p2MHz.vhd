-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mixer_ddc_q_p2MHz_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 8; 
             mem_size    : integer := 160
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mixer_ddc_q_p2MHz_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000", 1 => "00010100", 2 => "00100110", 3 => "00110100", 
    4 => "00111101", 5 => "01000000", 6 => "00111101", 7 => "00110100", 
    8 => "00100110", 9 => "00010100", 10 => "00000000", 11 => "11101100", 
    12 => "11011010", 13 => "11001100", 14 => "11000011", 15 => "11000000", 
    16 => "11000011", 17 => "11001100", 18 => "11011010", 19 => "11101100", 
    20 => "00000000", 21 => "00010100", 22 => "00100110", 23 => "00110100", 
    24 => "00111101", 25 => "01000000", 26 => "00111101", 27 => "00110100", 
    28 => "00100110", 29 => "00010100", 30 => "00000000", 31 => "11101100", 
    32 => "11011010", 33 => "11001100", 34 => "11000011", 35 => "11000000", 
    36 => "11000011", 37 => "11001100", 38 => "11011010", 39 => "11101100", 
    40 => "00000000", 41 => "00010100", 42 => "00100110", 43 => "00110100", 
    44 => "00111101", 45 => "01000000", 46 => "00111101", 47 => "00110100", 
    48 => "00100110", 49 => "00010100", 50 => "00000000", 51 => "11101100", 
    52 => "11011010", 53 => "11001100", 54 => "11000011", 55 => "11000000", 
    56 => "11000011", 57 => "11001100", 58 => "11011010", 59 => "11101100", 
    60 => "00000000", 61 => "00010100", 62 => "00100110", 63 => "00110100", 
    64 => "00111101", 65 => "01000000", 66 => "00111101", 67 => "00110100", 
    68 => "00100110", 69 => "00010100", 70 => "00000000", 71 => "11101100", 
    72 => "11011010", 73 => "11001100", 74 => "11000011", 75 => "11000000", 
    76 => "11000011", 77 => "11001100", 78 => "11011010", 79 => "11101100", 
    80 => "00000000", 81 => "00010100", 82 => "00100110", 83 => "00110100", 
    84 => "00111101", 85 => "01000000", 86 => "00111101", 87 => "00110100", 
    88 => "00100110", 89 => "00010100", 90 => "00000000", 91 => "11101100", 
    92 => "11011010", 93 => "11001100", 94 => "11000011", 95 => "11000000", 
    96 => "11000011", 97 => "11001100", 98 => "11011010", 99 => "11101100", 
    100 => "00000000", 101 => "00010100", 102 => "00100110", 103 => "00110100", 
    104 => "00111101", 105 => "01000000", 106 => "00111101", 107 => "00110100", 
    108 => "00100110", 109 => "00010100", 110 => "00000000", 111 => "11101100", 
    112 => "11011010", 113 => "11001100", 114 => "11000011", 115 => "11000000", 
    116 => "11000011", 117 => "11001100", 118 => "11011010", 119 => "11101100", 
    120 => "00000000", 121 => "00010100", 122 => "00100110", 123 => "00110100", 
    124 => "00111101", 125 => "01000000", 126 => "00111101", 127 => "00110100", 
    128 => "00100110", 129 => "00010100", 130 => "00000000", 131 => "11101100", 
    132 => "11011010", 133 => "11001100", 134 => "11000011", 135 => "11000000", 
    136 => "11000011", 137 => "11001100", 138 => "11011010", 139 => "11101100", 
    140 => "00000000", 141 => "00010100", 142 => "00100110", 143 => "00110100", 
    144 => "00111101", 145 => "01000000", 146 => "00111101", 147 => "00110100", 
    148 => "00100110", 149 => "00010100", 150 => "00000000", 151 => "11101100", 
    152 => "11011010", 153 => "11001100", 154 => "11000011", 155 => "11000000", 
    156 => "11000011", 157 => "11001100", 158 => "11011010", 159 => "11101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mixer_ddc_q_p2MHz is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 160;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mixer_ddc_q_p2MHz is
    component mixer_ddc_q_p2MHz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mixer_ddc_q_p2MHz_rom_U :  component mixer_ddc_q_p2MHz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


